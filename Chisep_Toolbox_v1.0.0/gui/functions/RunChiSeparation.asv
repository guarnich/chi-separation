function RunChiSeparation(app,event)

% Determine run status regarding the data, parameter, options


app.Output = struct();
[stat_param, run_options] = check_data(app);

if(~stat_param)
    return;
end

app.RunOptions = run_options;
dlg = uiprogressdlg(app.UIFigure,'Title','Program Information','Message','Running chi-separation...');

try
    % Tukey windowing
    imgc = app.Input.MGRE_Mag.data .* exp(1i*app.Input.MGRE_Pha.data*(-1)^(app.RunOptions.PhaseInverse));
    imgc = tukey_windowing(imgc,run_options.Tukey);
    FillData(app,abs(imgc),'MGRE_Mag_Tukey','Output');
    FillData(app,angle(imgc),'MGRE_Pha_Tukey','Output');
    
    
    % Brain mask
    if(strcmp(run_options.Mask,'Calculate'))
        %         matrix_size = size(app.Data.MGRE_Mag.data);
        voxel_size = app.Params.VoxelSize;
        matrix_size = size(app.Input.MGRE_Mag.data); matrix_size = matrix_size(1:3);
        try
            mask = BET(app.Output.MGRE_Mag_Tukey.data(:,:,:,1),matrix_size,voxel_size);
%             [~,mask] = fsl_bet( app.Output.MGRE_Mag_Tukey.data(:,:,:,1), 0.5, voxel_size);
            mask = double(mask);
            FillData(app,mask,'Mask','Output');
        catch
            msgbox('BET not working. Please provide a custom mask using the optional input tab','error','error');
            return;
        end
    else
        mask = app.Input.Mask.data;
    end

    % R2* fitting
    if(strcmp(run_options.R2s,'ARLO'))
        r2star = r2star_arlo(app.Output.MGRE_Mag_Tukey.data,app.Params.TE/1000, mask);
        FillData(app,r2star,'R2s','Output',[0,100]);
    elseif(strcmp(run_options.R2s,'NLLS fitting'))
        r2star = r2star_nnls(app.Output.MGRE_Mag_Tukey.data,app.Params.TE, mask);
        FillData(app,r2star,'R2s','Output',[0,100]);
    end
    
    % Phase unwrapping
    if(strcmp(run_options.Unwrap,'ROMEO + weighted echo averaging'))
        WrapperROMEO(app);
    elseif(strcmp(run_options.Unwrap,'nonlinear complex fitting + SEGUE'))
        WrapperSEGUE(app);
    end
    
    % Background field removal
    if(strcmp(run_options.BFR,'V-SHARP'))
        WrapperVSHARP(app)
    end
    
    % Chi separation
    switch run_options.Chisep
        case 'Chi-sepnet-R2*'
            app.Params.Dr = 114;
            WrapperChiSepnet(app);
        case 'Chi-sepnet-R2'''
            app.Params.Dr = 114;
            WrapperChiSepnet(app);
        case 'Chi-separation (MEDI)'
            app.Params.Dr = 137;
            WrapperChisepMEDI(app);
        case 'Chi-separation (iLSQR)'
            app.Params.Dr = 137;
            WrapperChisepiLSQR(app);
    end
    SaveData(app);
    UpdateImageDisplay(app);
    close(dlg);
    
catch MExc
    msgbox('Error occurred. Saving intermediate data');
    SaveData(app,MExc);
    UpdateImageDisplay(app);
    close(dlg);
end


end

function [stat_param, run_options] = check_data(app)

% Check if TE is equi-spaced and number of echo is larger than 2

data = app.Input ; params = app.Params;

if(~isfolder(app.OutputdirectoryEditField.Value))
    msgbox('Check the output directory','Error','Error');
    stat_param=false; return;   
end

if isfield(data,'Mask')
    run_options.Mask = 'Input';
else
    run_options.Mask = 'Calculate';
end

if isfield(data,'LocalField')
    run_options.Unwrap = 'Local field map Input';
    run_options.BFR = 'Local field map Input';
end


uidropdown = findobj(app.UIFigure,'Type','uidropdown', '-and', 'Tag', 'R2s');
if(strcmp(uidropdown.Value,'ARLO'))
    dTE = params.TE(2)-params.TE(1);
    if(~isempty(find(abs(params.TE-params.TE(1)-dTE*(0:length(params.TE)-1)')>0.001,1)) && (length(params.TE)>2))
%         uidropdown.Value = 'NLLS fitting';
        msgbox('TE does not qualify for ARLO. Try using NNLS fitting instead.','Error','Error');
        stat_param=false; return;
    end
end
run_options.R2s = uidropdown.Value;

% Check tukey option
uieditfield = findobj(app.UIFigure,'Type','uinumericeditfield', '-and', 'Tag', 'Tukey');
run_options.Tukey = uieditfield.Value;

% Check phase unwrap options
uidropdown = findobj(app.UIFigure,'Type','uidropdown', '-and', 'Tag', 'Unwrap');
run_options.Unwrap = uidropdown.Value;

% Check BFR options
uidropdown = findobj(app.UIFigure,'Type','uidropdown', '-and', 'Tag', 'BFR');
run_options.BFR = uidropdown.Value;

% Check local field existance
uidropdown1 = findobj(app.UIFigure,'Type','uidropdown', '-and', 'Tag', 'Unwrap');
uidropdown2 = findobj(app.UIFigure,'Type','uidropdown', '-and', 'Tag', 'BFR');
if(strcmp(uidropdown1.Value,'Use preprocessed local field map')||strcmp(uidropdown2.Value,'Use preprocessed local field map'))
    if(~isfield(app.Input,'LocalField'))
        msgbox('No local field map input. Check processing options.','Error','Error');
        stat_param=false; return;
    end
end


% Check Chi-separation options
uidropdown = findobj(app.UIFigure,'Type','uidropdown', '-and', 'Tag', 'Chisep');
if (find(strcmp(uidropdown.Items,uidropdown.Value))~=1) && (~isfield(data,'R2p'))
    msgbox('No R2'' input found. Try using Chi-sepnet-R2* instead.','Error','Error');
    stat_param=false; return;
%     uidropdown.Value = uidropdown.Items{1};
end
if (strcmp(uidropdown.Value,'Chi-sepnet-R2*') || strcmp(uidropdown.Value,'Chi-sepnet-R2'''))
    if ~exist('importONNXFunction')
        msgbox('You need to install the onnx add-on to use the chi-','Error','Error');
        stat_param=false; return;
    end
end

uidropdown = findobj(app.UIFigure,'Type','uidropdown', '-and', 'Tag', 'Chisep');
if (find(strcmp(uidropdown.Items,uidropdown.Value))==1) && (~isfield(data,'R2s'))
    if(isfield(data,'R2p'))
        msgbox('No R2* input, but R2'' input found. Try different Chi-separation methods.','Error','Error');
        stat_param=false; return;
    end
end

run_options.Chisep = uidropdown.Value;
% run_options.SaveIntermediateData = app.SaveintermCheckBox.Value;

if isfield(data,'QSM') && (strcmp(run_options.Chisep,'Chi-separation (MEDI)') || strcmp(run_options.Chisep,'Chi-separation (iLSQR)'))
    run_options.QSMinit = true;
else
    run_options.QSMinit = false;
end

if app.PhaseInverseCheckBox.Value
    run_options.PhaseInverse = true;
else
    run_options.PhaseInverse = false;
end

if app.ResolutionPreserveCheckBox.Value
    run_options.PreserveResolution = true;
else
    run_options.PreserveResolution = false;
end

rundatetime = char(datetime('now','Format',"MM-dd-yy_HH.mm.ss"));
run_options.datetime = rundatetime;
stat_param = issorted(params.TE) && (params.CF ~= 0) && (~isempty(params.VoxelSize));
if(~stat_param)
    msgbox('Check the parameters.','Error','Error');
    stat_param=false; return;   
end

end
